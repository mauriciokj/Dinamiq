#!/usr/bin/env bash

# Script de desenvolvimento para DinamiQ
# Facilita o gerenciamento dos projetos frontend e backend

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Função para mostrar ajuda
show_help() {
    echo -e "${BLUE}🚀 DinamiQ - Script de Desenvolvimento${NC}"
    echo -e "${BLUE}=====================================${NC}"
    echo ""
    echo "Uso: $0 [comando]"
    echo ""
    echo "Comandos disponíveis:"
    echo -e "  ${GREEN}start${NC}           - Inicia todos os servidores (backend + frontend)"
    echo -e "  ${GREEN}backend${NC}         - Inicia apenas o servidor backend (Rails)"
    echo -e "  ${GREEN}frontend${NC}        - Inicia apenas o servidor frontend (React)"
    echo -e "  ${GREEN}install${NC}         - Instala dependências do frontend"
    echo -e "  ${GREEN}info${NC}            - Mostra informações dos projetos"
    echo -e "  ${GREEN}setup${NC}           - Configuração inicial dos projetos"
    echo -e "  ${GREEN}test${NC}            - Executa testes do backend"
    echo -e "  ${GREEN}console${NC}         - Abre console Rails"
    echo -e "  ${GREEN}logs${NC}            - Mostra logs do servidor Rails"
    echo -e "  ${GREEN}help${NC}            - Mostra esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0 start     # Inicia desenvolvimento completo"
    echo "  $0 backend   # Apenas backend"
    echo "  $0 frontend  # Apenas frontend"
    echo ""
}

# Função para verificar se estamos no diretório correto
check_directory() {
    if [[ ! -f "Gemfile" ]] || [[ ! -f "config/application.rb" ]]; then
        echo -e "${RED}❌ Erro: Execute este script no diretório raiz do projeto Rails${NC}"
        exit 1
    fi
}

# Função para limpar processos em portas específicas
kill_port_process() {
    local port=$1
    local process_name=$2
    
    if lsof -i :$port > /dev/null 2>&1; then
        echo -e "${YELLOW}🔄 Porta $port está em uso. Liberando...${NC}"
        local pid=$(lsof -ti :$port)
        if [[ -n "$pid" ]]; then
            kill $pid 2>/dev/null || true
            sleep 1
            echo -e "${GREEN}✅ Porta $port liberada${NC}"
        fi
    fi
}

# Função para verificar se o arquivo de configuração existe
check_config() {
    if [[ ! -f "config/projects.yml" ]]; then
        echo -e "${RED}❌ Erro: Arquivo config/projects.yml não encontrado${NC}"
        echo -e "${YELLOW}💡 Execute: $0 setup para criar a configuração inicial${NC}"
        exit 1
    fi
}

# Função para setup inicial
setup_projects() {
    echo -e "${BLUE}🔧 Configuração inicial dos projetos${NC}"
    echo ""
    
    # Verifica se o arquivo de configuração já existe
    if [[ -f "config/projects.yml" ]]; then
        echo -e "${GREEN}✅ Arquivo config/projects.yml já existe${NC}"
    else
        echo -e "${RED}❌ Arquivo config/projects.yml não encontrado${NC}"
        echo -e "${YELLOW}💡 Crie o arquivo manualmente ou use o template fornecido${NC}"
        exit 1
    fi
    
    # Verifica dependências do backend
    echo -e "${CYAN}📦 Verificando dependências do backend...${NC}"
    if ! command -v ruby &> /dev/null; then
        echo -e "${RED}❌ Ruby não está instalado${NC}"
        exit 1
    fi
    
    if ! command -v bundle &> /dev/null; then
        echo -e "${RED}❌ Bundler não está instalado. Execute: gem install bundler${NC}"
        exit 1
    fi
    
    # Instala gems se necessário
    if [[ ! -f "Gemfile.lock" ]] || [[ "Gemfile" -nt "Gemfile.lock" ]]; then
        echo -e "${YELLOW}🔄 Instalando gems...${NC}"
        bundle install
    fi
    
    # Verifica dependências do frontend
    echo -e "${CYAN}📦 Verificando dependências do frontend...${NC}"
    if ! command -v node &> /dev/null; then
        echo -e "${RED}❌ Node.js não está instalado${NC}"
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}❌ npm não está instalado${NC}"
        exit 1
    fi
    
    # Verifica se o diretório do frontend existe
    if [[ ! -d "../poll-front" ]]; then
        echo -e "${RED}❌ Diretório ../poll-front não encontrado${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✅ Setup concluído com sucesso!${NC}"
}

# Função para mostrar informações dos projetos
show_info() {
    echo -e "${BLUE}📊 DinamiQ - Informações dos Projetos${NC}"
    echo -e "${BLUE}====================================${NC}"
    echo ""
    echo -e "${PURPLE}Backend (Rails):${NC}"
    echo -e "  📍 Porta: 3005"
    echo -e "  📂 Caminho: ."
    echo -e "  🌐 URL: http://localhost:3005"
    echo -e "  📝 Descrição: API Rails para sistema de enquetes em tempo real"
    echo ""
    echo -e "${PURPLE}Frontend (React):${NC}"
    echo -e "  📍 Porta: 3009"
    echo -e "  📂 Caminho: ../poll-front"
    echo -e "  🌐 URL: http://localhost:3009"
    echo -e "  📝 Descrição: Interface React para visualização e criação de enquetes"
    echo ""
    echo -e "${PURPLE}WebSocket:${NC}"
    echo -e "  🔌 URL: ws://localhost:3005/cable"
    echo ""
}

# Função para iniciar o backend
start_backend() {
    echo -e "${BLUE}🚀 Iniciando DinamiQ Backend (Rails)...${NC}"
    
    # Libera a porta se estiver ocupada
    kill_port_process 3005 "Rails"
    
    # Verifica se as gems estão instaladas
    if [[ ! -f "Gemfile.lock" ]]; then
        echo -e "${YELLOW}🔄 Instalando gems...${NC}"
        bundle install
    fi
    
    # Inicia o servidor Rails
    echo -e "${GREEN}✅ Iniciando servidor Rails na porta 3005...${NC}"
    bundle exec rails server -p 3005
}

# Função para iniciar o backend em background
start_backend_background() {
    echo -e "${BLUE}🚀 Iniciando DinamiQ Backend (Rails) em background...${NC}"
    
    # Libera a porta se estiver ocupada
    kill_port_process 3005 "Rails"
    
    # Verifica se as gems estão instaladas
    if [[ ! -f "Gemfile.lock" ]]; then
        echo -e "${YELLOW}🔄 Instalando gems...${NC}"
        bundle install
    fi
    
    # Inicia o servidor Rails em background
    echo -e "${GREEN}✅ Iniciando servidor Rails na porta 3005 (background)...${NC}"
    bundle exec rails server -p 3005 > /dev/null 2>&1 &
    
    # Salva o PID do processo para poder matá-lo depois
    BACKEND_PID=$!
    echo -e "${CYAN}📝 Backend PID: $BACKEND_PID${NC}"
    
    # Função para limpar processos ao sair
    cleanup() {
        echo -e "\n${YELLOW}🔄 Parando serviços...${NC}"
        if [[ -n "$BACKEND_PID" ]]; then
            kill $BACKEND_PID 2>/dev/null || true
            echo -e "${GREEN}✅ Backend parado${NC}"
        fi
        kill_port_process 3005 "Rails"
        kill_port_process 3009 "React"
        exit 0
    }
    
    # Configura trap para limpar processos ao receber Ctrl+C
    trap cleanup SIGINT SIGTERM
}

# Função para iniciar o frontend
start_frontend() {
    echo -e "${BLUE}🚀 Iniciando Poll-Front (React)...${NC}"
    
    # Verifica se o diretório existe
    if [[ ! -d "../poll-front" ]]; then
        echo -e "${RED}❌ Diretório ../poll-front não encontrado${NC}"
        exit 1
    fi
    
    # Libera a porta se estiver ocupada
    kill_port_process 3009 "React"
    
    # Muda para o diretório do frontend
    cd ../poll-front
    
    # Verifica se as dependências estão instaladas
    if [[ ! -d "node_modules" ]]; then
        echo -e "${YELLOW}🔄 Instalando dependências npm...${NC}"
        npm install
    fi
    
    # Inicia o servidor de desenvolvimento
    echo -e "${GREEN}✅ Iniciando servidor React na porta 3009...${NC}"
    
    # Se foi chamado pelo start_all, configura trap para limpeza
    if [[ "${CALLED_FROM_START_ALL}" == "true" ]]; then
        # Função para limpar processos ao sair
        cleanup_frontend() {
            echo -e "\n${YELLOW}🔄 Parando serviços...${NC}"
            if [[ -n "$BACKEND_PID" ]]; then
                kill $BACKEND_PID 2>/dev/null || true
                echo -e "${GREEN}✅ Backend parado${NC}"
            fi
            kill_port_process 3005 "Rails"
            kill_port_process 3009 "React"
            exit 0
        }
        
        # Configura trap para limpar processos ao receber Ctrl+C
        trap cleanup_frontend SIGINT SIGTERM
    fi
    
    npm run dev
}

# Função para instalar dependências do frontend
install_frontend_deps() {
    echo -e "${BLUE}📦 Instalando dependências do frontend...${NC}"
    
    if [[ ! -d "../poll-front" ]]; then
        echo -e "${RED}❌ Diretório ../poll-front não encontrado${NC}"
        exit 1
    fi
    
    cd ../poll-front
    npm install
    echo -e "${GREEN}✅ Dependências instaladas com sucesso!${NC}"
}

# Função para iniciar todos os serviços
start_all() {
    echo -e "${BLUE}🚀 Iniciando DinamiQ - Desenvolvimento Completo${NC}"
    echo -e "${BLUE}===============================================${NC}"
    echo ""
    
    # Verifica configuração
    check_config
    
    echo -e "${CYAN}📋 Iniciando backend e frontend automaticamente...${NC}"
    echo -e "${YELLOW}💡 Use Ctrl+C para parar ambos os serviços${NC}"
    echo ""
    
    # Define que foi chamado pelo start_all
    export CALLED_FROM_START_ALL="true"
    
    # Inicia o backend em background
    start_backend_background
    
    # Exporta o PID do backend para o frontend poder acessar
    export BACKEND_PID
    
    # Aguarda um pouco para o backend inicializar
    sleep 3
    
    # Inicia o frontend em primeiro plano
    start_frontend
}

# Função para executar testes
run_tests() {
    echo -e "${BLUE}🧪 Executando testes do backend...${NC}"
    bundle exec rspec
}

# Função para abrir console Rails
open_console() {
    echo -e "${BLUE}💻 Abrindo console Rails...${NC}"
    bundle exec rails console
}

# Função para mostrar logs
show_logs() {
    echo -e "${BLUE}📋 Logs do servidor Rails...${NC}"
    tail -f log/development.log
}

# Verifica se estamos no diretório correto
check_directory

# Processa argumentos da linha de comando
case "${1:-help}" in
    "start")
        start_all
        ;;
    "backend")
        start_backend
        ;;
    "frontend")
        start_frontend
        ;;
    "install")
        install_frontend_deps
        ;;
    "info")
        show_info
        ;;
    "setup")
        setup_projects
        ;;
    "test")
        run_tests
        ;;
    "console")
        open_console
        ;;
    "logs")
        show_logs
        ;;
    "help"|*)
        show_help
        ;;
esac
